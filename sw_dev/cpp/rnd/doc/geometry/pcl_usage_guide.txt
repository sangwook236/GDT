[-] General.
	- Site.
		http://pointclouds.org/
		https://github.com/PointCloudLibrary/pcl

		http://pointclouds.org/documentation/tutorials/

		https://github.com/PointCloudLibrary/data

[-] Tools.
	- Visualization.
		pcl_viewer:
			pcl_viewer <file_name 1..N>.<pcd or vtk> <options>

			pcl_viewer input.pcd
			pcl_viewer -multiview 1 input1.pcd input2.pcd
			pcl_viewer input.pcd -normals 1 -normals_scale 0.02
			pcl_viewer input.pcd -pc 1 -pc_scale 0.02

			Options:
				-bc r,g,b                = background color
				-fc r,g,b                = foreground color
				-ps X                    = point size (1..64) 
				-opaque X                = rendered point cloud opacity (0..1)
				-shading X               = rendered surface shading ('flat' (default), 'gouraud', 'phong')
				-position x,y,z          = absolute point cloud position in metres
				-orientation r,p,y       = absolute point cloud orientation (roll, pitch, yaw) in radians
				-ax n                    = enable on-screen display of XYZ axes and scale them to n
				-ax_pos X,Y,Z            = if axes are enabled, set their X,Y,Z position in space (default 0,0,0)

				-cam (*)                 = use given camera settings as initial view
				    (*) [Clipping Range / Focal Point / Position / ViewUp / Distance / Field of View Y / Window Size / Window Pos] or use a <filename.cam> that contains the same information.

				-multiview 0/1           = enable/disable auto-multi viewport rendering (default disabled)


				-normals 0/X             = disable/enable the display of every Xth point's surface normal as lines (default disabled)
				-normals_scale X         = resize the normal unit vector size to X (default 0.02)

				-pc 0/X                  = disable/enable the display of every Xth point's principal curvatures as lines (default disabled)
				-pc_scale X              = resize the principal curvatures vectors size to X (default 0.02)

				-immediate_rendering 0/1 = use immediate mode rendering to draw the data (default: disabled)
										   Note: the use of immediate rendering will enable the visualization of larger datasets at the expense of extra RAM.
										   See https://en.wikipedia.org/wiki/Immediate_mode for more information.
				-vbo_rendering 0/1       = use OpenGL 1.4+ Vertex Buffer Objects for rendering (default: disabled)
										   Note: the use of VBOs will enable the visualization of larger datasets at the expense of extra RAM.
										   See https://en.wikipedia.org/wiki/Vertex_Buffer_Object for more information.

				-use_point_picking       = enable the usage of picking points on screen (default disabled)

				-use_area_picking        = enable the usage of area picking points on screen (default disabled)

				-optimal_label_colors    = maps existing labels to the optimal sequential glasbey colors, label_ids will not be mapped to fixed colors (default disabled)

				-edl                     = Enable Eye-Dome Lighting rendering, to improve depth perception. (default: disabled)


			Interactive commands:
					  p, P   : switch to a point-based representation
					  w, W   : switch to a wireframe-based representation (where available)
					  s, S   : switch to a surface-based representation (where available)

					  j, J   : take a .PNG snapshot of the current window view
					  c, C   : display current camera/window parameters
					  f, F   : fly to point mode

					  e, E   : exit the interactor
					  q, Q   : stop and call VTK's TerminateApp

					   +/-   : increment/decrement overall point size
				 +/- [+ ALT] : zoom in/out 

					  g, G   : display scale grid (on/off)
					  u, U   : display lookup table (on/off)

				o, O         : switch between perspective/parallel projection (default = perspective)
				r, R [+ ALT] : reset camera [to viewpoint = {0, 0, 0} -> center_{x, y, z}]
				CTRL + s, S  : save camera parameters
				CTRL + r, R  : restore camera parameters

				ALT + s, S   : turn stereo mode on/off
				ALT + f, F   : switch between maximized window mode and original size

					  l, L           : list all available geometric and color handlers for the current actor map
				ALT + 0..9 [+ CTRL]  : switch between different geometric handlers (where available)
					  0..9 [+ CTRL]  : switch between different color handlers (where available)

				SHIFT + left click   : select a point (start with -use_point_picking)

					  x, X   : toggle rubber band selection mode for left mouse button

	- Conversion.
		pcl_obj2pcd
		pcl_obj2ply
		pcl_obj2vtk
		pcl_pcd2ply
			pcl_pcd2ply [-format 0|1] [-use_camera 0|1] input.pcd output.ply
		pcl_pcd2png
		pcl_pcd2vtk
		pcl_ply2obj
		pcl_ply2pcd
			pcl_ply2pcd [-format 0|1] input.ply output.pcd
		pcl_ply2ply
		pcl_ply2raw
		pcl_ply2vtk
		pcl_vtk2obj
		pcl_vtk2pcd
		pcl_vtk2ply
		pcl_xyz2pcd

	- Utility.
		pcl_normal_estimation:
			pcl_normal_estimation input.pcd output.pcd <options> [optional_arguments]

[-] Building.
	- Copy files.
		Source:
			${PCL_HOME}/features/include/features/*
			${PCL_HOME}/features/include/features/impl/*
			${PCL_HOME}/registration/include/registration/*
			${PCL_HOME}/registration/include/registration/impl/*
			${PCL_HOME}/sample_consensus/include/sample_consensus/*
			${PCL_HOME}/sample_consensus/include/sample_consensus/impl/*
		Target:
			${PCL_HOME}/PCL-?.?.?-Source/features/include/features/*
			${PCL_HOME}/PCL-?.?.?-Source/features/include/features/impl/*
			${PCL_HOME}/PCL-?.?.?-Source/registration/include/registration/*
			${PCL_HOME}/PCL-?.?.?-Source/registration/include/registration/impl/*
			${PCL_HOME}/PCL-?.?.?-Source/sample_consensus/include/sample_consensus/*
			${PCL_HOME}/PCL-?.?.?-Source/sample_consensus/include/sample_consensus/impl/*

[-] Installation (Ubuntu).
	- Install.
		Install Eigen.
		Install VTK.

		apt install libpcl-dev
		apt install python3-pcl

	- Install from source.
		libusb-1.0:
			sudo apt install libusb-1.0-0-dev
		(Optional) CUDA toolkit.
		(Optional) VTK.

		git clone https://github.com/PointCloudLibrary/pcl

		CMake:
			Configure.
				(Optional) set BUILD_CUDA to ON.
				(Optional) set BUILD_GPU to ON.
			Generate.

		make -j8
		sudo make install

[-] Installation (Python).
	- Install.
		pclpy:
			https://github.com/davidcaron/pclpy

			conda install -c conda-forge -c davidcaron pclpy

		python-pcl:
			https://github.com/strawlab/python-pcl

			pip install cython numpy
			git clone https://github.com/strawlab/python-pcl.git
			cd python-pcl
			python --version

			sudo python setup.py build_ext -i
			sudo python setup.py install

[-] Troubleshooting.
	- <error> Linking error of the Boost.Thread library when using Boost 1.50.0.
		<solution> Add the Boost.Chrono library to projects below. 
			pcl_common
			pcl_octree
			pcl_kdtree
			pcl_sample_consensus
			pcl_filters
			pcl_features
			pcl_io
			pcl_io_ply
			pcl_keypoints
			pcl_segmentation
			pcl_tracking
			pcl_search
			pcl_surface
			pcl_registration
			pcl_visualization
			pcl_apps
			ppf_object_recognition
			pcd_grabber_viewer
			pcl_range_image_border_extractor
			registration_visualizer
			openni_viewer
			openni_uniform_sampling
			openni_tracking
			openni_stream_compression
			openni_io
			openni_ii_normal_estimation
			openni_grab_frame
			openni_feature_persistence,
			openni_fast_mesh
			openni_change_viewer
			openni_boundary_estimation
			openni_3d_convex_hull
			openni_3d_concave_hull
			test_sample_consensus
			timed_trigger_test

	- <error> redefinition of formal parameter 'n'.
		In ${EIGEN_HOME}/Core/MatrixBase.h.
		<solution>
			<before> template<template<typename T, int n> class U>
			<after> template<template<typename T, int N> class U>

	- <error> Compiling Filesystem version 3 file with BOOST_FILESYSTEM_VERSION defined != 3.
		In the Boost.Filesystem library.
		<cause> Boost 1.50.0 does not support Boost.Filesystem 2.
		<solution> Comment macros in the files below.
			//#define BOOST_FILESYSTEM_VERSION 2
			${PCL_HOME}/PCL-?.?.?-Source/io/src/openni_grabber.cpp
			${PCL_HOME}/PCL-?.?.?-Source/visualization/tools/pcd_grabber_viewer.cpp

	- <error> unresolved external symbol qh_qh.
		<cause> If shared library is used, qh_QHpointer_dllimport has to be defined as a macro.
		<solution> Link QHull library as a static library.
