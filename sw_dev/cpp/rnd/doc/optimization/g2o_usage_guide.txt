[-] General.
	- Site.
		https://github.com/RainerKuemmerle/g2o

		https://github.com/uoip/g2opy

		https://openslam-org.github.io/g2o.html
		https://github.com/OpenSLAM-org/openslam_g2o

	- Document.
		g2o.pdf

[-] Usage.
	- g2o file format.
		https://github.com/RainerKuemmerle/g2o/wiki/File-Format
		https://github.com/RainerKuemmerle/g2o/wiki/File-Format-SLAM-2D
		https://github.com/RainerKuemmerle/g2o/wiki/File-format-slam-3d

[-] Tool.
	- g2o.
		Command line interface (CLI).
		https://github.com/RainerKuemmerle/g2o/tree/master/g2o/apps/g2o_cli

		g2o [options] [graph-input]
			g2o -o optimzed_output.g2o noisy_input.g2o
			g2o -robustKernel Cauchy -robustKernelWidth 1 -i 50 -o optimzed_output.g2o noisy_input.g2o
			g2o -v -solverlib libg2o_solver_cholmod.so -solver lm_fix6_3_cholmod -i 10 -o optimzed_output.g2o noisy_input.g2o
			g2o -v -typeslib libg2o_types_slam3d.so -i 20 -o optimzed_output.g2o noisy_input.g2o

			g2o -listSolvers
			g2o -listTypes
			g2o -listRobustKernels

	- g2o_viewer.
		https://github.com/RainerKuemmerle/g2o/tree/master/g2o/apps/g2o_viewer

		g2o_viewer
		g2o_viewer [options] [graph-input]

	- g2o_incremental.
		g2o includes an experimental binary for performing optimization in an incremental fashion, i.e., optimizing after inserting one or several nodes along with their measurements.

		g2o_incremental [options]
			g2o_incremental -i manhattanOlson3500.g2o

	- Simulator.
		https://github.com/RainerKuemmerle/g2o/tree/master/g2o/apps/g2o_simulator
		https://github.com/RainerKuemmerle/g2o/tree/master/g2o/examples/tutorial_slam2d/simulator.h & simulator.cpp

		g2o_simulator2d [options] [graph-output]
			https://github.com/RainerKuemmerle/g2o/blob/master/g2o/apps/g2o_simulator/test_simulator2d.cpp

			g2o_simulator2d -hasPointSensor simulator_out.g2o
				Types: VERTEX_XY, VERTEX_SE2, & EDGE_SE2_XY.
			g2o_simulator2d -hasPointBearingSensor simulator_out.g2o
				Types: VERTEX_XY, VERTEX_SE2, & EDGE_BEARING_SE2_XY.
			g2o_simulator2d -hasPoseSensor simulator_out.g2o
				Types: VERTEX_SE2 & EDGE_SE2.
			g2o_simulator2d -hasOdom simulator_out.g2o
				Types: VERTEX_SE2 & EDGE_SE2.

			g2o_simulator2d -hasPointSensor -nSegments 2000 -nlandmarks 500 -simSteps 200 -worldSize 50 simulator_out.g2o

		g2o_simulator3d [options] [graph-output]
			https://github.com/RainerKuemmerle/g2o/blob/master/g2o/apps/g2o_simulator/test_simulator3d.cpp

			g2o_simulator3d -hasPointSensor simulator_out.g2o
				Types: PARAMS_SE3OFFSET, VERTEX_TRACKXYZ, VERTEX_SE3:QUAT, & EDGE_SE3_TRACKXYZ.
			g2o_simulator3d -hasPointDepthSensor simulator_out.g2o
				Types: PARAMS_CAMERACALIB, VERTEX_TRACKXYZ, VERTEX_SE3:QUAT, & EDGE_PROJECT_DEPTH.
			g2o_simulator3d -hasPointDisparitySensor simulator_out.g2o
				Types: PARAMS_CAMERACALIB, VERTEX_TRACKXYZ, VERTEX_SE3:QUAT, & EDGE_PROJECT_DISPARITY.
			g2o_simulator3d -hasPoseSensor simulator_out.g2o
				Types: VERTEX_SE3:QUAT & EDGE_SE3:QUAT.
			g2o_simulator3d -hasOdom simulator_out.g2o
				Types: VERTEX_SE3:QUAT & EDGE_SE3:QUAT.

			g2o_simulator3d -hasPointSensor -nLandmarks 2000 -simSteps 200 -worldSize 50 simulator_out.g2o

[-] Installation (g2o, Ubuntu).
	- Install from source.
		sudo apt install qtbase5-dev
		sudo apt install libeigen3-dev libsuitesparse-dev libqglviewer-dev-qt5

		git clone https://github.com/RainerKuemmerle/g2o.git

		mkdir build
		cd build
		cmake ../
		make -j8
		sudo make install

[-] Installation (g2opy, Ubuntu).
	- Install Pangolin.
		git clone https://github.com/uoip/pangolin.git

		cd pangolin
		mkdir build
		cd build
		cmake ..
		make -j8

		Edit lines 70~141 in pangolin/src/video/drivers/ffmpeg.cpp:
			<before>
				...
				TEST_PIX_FMT_RETURN(XVMC_MPEG2_MC);
				TEST_PIX_FMT_RETURN(XVMC_MPEG2_IDCT);
				...
				TEST_PIX_FMT_RETURN(VDPAU_H264);
				TEST_PIX_FMT_RETURN(VDPAU_MPEG1);
				TEST_PIX_FMT_RETURN(VDPAU_MPEG2);
				TEST_PIX_FMT_RETURN(VDPAU_WMV3);
				TEST_PIX_FMT_RETURN(VDPAU_VC1);
				...
				TEST_PIX_FMT_RETURN(VDPAU_MPEG4);
				...
			<after>
				...
				//TEST_PIX_FMT_RETURN(XVMC_MPEG2_MC);
				//TEST_PIX_FMT_RETURN(XVMC_MPEG2_IDCT);
				...
				//TEST_PIX_FMT_RETURN(VDPAU_H264);
				//TEST_PIX_FMT_RETURN(VDPAU_MPEG1);
				//TEST_PIX_FMT_RETURN(VDPAU_MPEG2);
				//TEST_PIX_FMT_RETURN(VDPAU_WMV3);
				//TEST_PIX_FMT_RETURN(VDPAU_VC1);
				...
				//TEST_PIX_FMT_RETURN(VDPAU_MPEG4);
				...
		Edit pangolin/setup.py:
			<before>
				class CopyLibFile(install):
					def run(self):
						install_dir = get_python_lib()

						lib_file = glob.glob(__library_file__)
						assert len(lib_file) == 1 and len(install_dirs) >= 1     

						print('copying {} -> {}'.format(lib_file[0], install_dirs[0]))
						shutil.copy(lib_file[0], install_dir)
			<after>
				class CopyLibFile(install):
					def run(self):
						install_dir = get_python_lib()

						lib_file = glob.glob(__library_file__)
						assert len(lib_file) == 1

						print('copying {} -> {}'.format(lib_file[0], install_dir))
						shutil.copy(lib_file[0], install_dir)

		cd ..
		python setup.py install

	- Install from g2opy.
		git clone https://github.com/uoip/g2opy.git

		Edit lines 185~188 in g2opy/python/core/eigen_types.h:
			<error> no matches converting function 'x' to type 'double (class Eigen::Quaternion<double>::*)() const'.
			<solution>
				<before>
					.def("x", (double (Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::x)
					.def("y", (double (Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::y)
					.def("z", (double (Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::z)
					.def("w", (double (Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::w)
				<after>
					.def("x", (const double &(Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::x)
					.def("y", (const double &(Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::y)
					.def("z", (const double &(Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::z)
					.def("w", (const double &(Eigen::Quaterniond::*) () const) &Eigen::Quaterniond::w)

					or

					.def("x", (double &(Eigen::Quaterniond::*) ()) &Eigen::Quaterniond::x)
					.def("y", (double &(Eigen::Quaterniond::*) ()) &Eigen::Quaterniond::y)
					.def("z", (double &(Eigen::Quaterniond::*) ()) &Eigen::Quaterniond::z)
					.def("w", (double &(Eigen::Quaterniond::*) ()) &Eigen::Quaterniond::w)

		Edit g2opy/setup.py:
			<error> error: Multiple top-level packages discovered in a flat-layout: ['g2o', 'lib', 'script', 'contrib', 'EXTERNAL', 'cmake_modules'].
			<solution>
				<before>
					setup(
						name='g2opy',
						version=__version__,
						description='Python binding of C++ graph optimization framework g2o.',
						url='https://github.com/uoip/g2opy',
						license='BSD',
						cmdclass=dict(
							install=CopyLibFile
						),
						keywords='g2o, SLAM, BA, ICP, optimization, python, binding',
						long_description="""This is a Python binding for c++ library g2o 
							(https://github.com/RainerKuemmerle/g2o).

							g2o is an open-source C++ framework for optimizing graph-based nonlinear 
							error functions. g2o has been designed to be easily extensible to a wide 
							range of problems and a new problem typically can be specified in a few 
							lines of code. The current implementation provides solutions to several 
							variants of SLAM and BA."""
					)
				<after>
					setup(
						name='g2opy',
						version=__version__,
						description='Python binding of C++ graph optimization framework g2o.',
						url='https://github.com/uoip/g2opy',
						license='BSD',
						cmdclass=dict(
							install=CopyLibFile
						),
						keywords='g2o, SLAM, BA, ICP, optimization, python, binding',
						long_description="""This is a Python binding for c++ library g2o 
							(https://github.com/RainerKuemmerle/g2o).

							g2o is an open-source C++ framework for optimizing graph-based nonlinear 
							error functions. g2o has been designed to be easily extensible to a wide 
							range of problems and a new problem typically can be specified in a few 
							lines of code. The current implementation provides solutions to several 
							variants of SLAM and BA.""",
						py_modules=[]
					)

		cd g2opy
		mkdir build
		cd build
		cmake ..
		make -j8

		cd ..
		python setup.py install

		pip uninstall g2opy
		rm $HOME/anaconda3/envs/<ENV>/lib/<PYTHON>/site-packages/g2o.cpython-<VERION>-x86_64-linux-gnu
