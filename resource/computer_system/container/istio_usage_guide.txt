[-] General.
	- Site.
		https://istio.io/

[-] Usage.
	- Get started.
		https://istio.io/latest/docs/setup/getting-started/

		Deploy the sample application:
			kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

			kubectl get services
			kubectl get pods

			kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

		Open the application to outside traffic:
			kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
			istioctl analyze

			Determine the ingress IP and ports:
				kubectl get svc istio-ingressgateway -n istio-system
					If the EXTERNAL-IP value is set, your environment has an external load balancer that you can use for the ingress gateway.
					If the EXTERNAL-IP value is <none> (or perpetually <pending>), your environment does not provide an external load balancer for the ingress gateway.
					In this case, you can access the gateway using the service's node port.

				Follow these instructions if you have determined that your environment has an external load balancer.
					export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
					export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
					export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
				Follow these instructions if your environment does not have an external load balancer and choose a node port instead.
					Set the ingress ports:
						export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
						export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')

					GKE:
						export INGRESS_HOST=workerNodeAddress
					IBM Cloud Kubernetes Service:
						ibmcloud ks workers --cluster cluster-name-or-id
						export INGRESS_HOST=public-IP-of-one-of-the-worker-nodes
					Docker For Desktop:
						export INGRESS_HOST=127.0.0.1
					Other environments:
						export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')

				export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
				echo $GATEWAY_URL

			Verify external access:
				echo "http://$GATEWAY_URL/productpage"

			Paste the output from the previous command into your web browser.

		View the dashboard:
			kubectl apply -f samples/addons
			kubectl rollout status deployment/kiali -n istio-system

			istioctl dashboard kiali

		View the dashboard from a worker node:
			kubectl describe svc kiali -n istio-system
				Search for "Endpoints:".

			Paste the "Endpoints:" address into your web browser.

[-] Installation.
	https://istio.io/latest/docs/setup/getting-started/
	https://istio.io/latest/docs/setup/install/
	https://istio.io/latest/docs/setup/install/istioctl/
	https://istio.io/latest/docs/setup/install/helm/

	- Install.
		curl -L https://istio.io/downloadIstio | sh -
		curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.6.8 TARGET_ARCH=x86_64 sh -

		cd istio-1.13.2
		export PATH=$PWD/bin:$PATH

		istioctl x precheck

		istioctl install --set profile=demo -y

		kubectl get deploy -n istio-system
		istioctl profile list

		(Optional) add a namespace label to enable Istio to automatically inject Envoy sidecar proxies:
			kubectl label namespace default istio-injection=enabled
			kubectl label namespace default istio-injection=disabled

		istioctl verify-install

	- Uninstall.
		istioctl x uninstall --purge

		kubectl delete namespace istio-system

[-] Troubleshooting.
	- <error> Istiod encountered an error: failed to wait for resource: resources not ready after 5m0s: timed out waiting for the condition
		<solution>
			Control plane node isolation:
				kubectl taint nodes --all node-role.kubernetes.io/master-
				kubectl taint nodes <MASTER_NAME> node-role.kubernetes.io/master-

	- <error> 
		Istiod encountered an error: failed to wait for resource: resources not ready after 5m0s: timed out waiting for the condition
		Readiness probe failed: Get "http://192.0.1.4:8080/ready": dial tcp 192.0.1.4:8080: connect: connection refused
		<check>
			kubectl get deploy -n istio-system -o wide
			kubectl get svc -n istio-system -o wide
			kubectl get pods -n istio-system -o wide
			kubectl describe pod <POD_NAME> -n istio-system
		<solution 1>
			sudo ufw disable
		<cause 2>
			When Istiod is installed on a worker node, but not the master. (???)
		<solution 2>
			Install Istio before join any worker node. (?)
